/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ThreeCardsContract
  extends Truffle.Contract<ThreeCardsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ThreeCardsInstance>;
}

export interface GameCreated {
  name: "GameCreated";
  args: {
    gameId: BN;
    dealer: string;
    0: BN;
    1: string;
  };
}

type AllEvents = GameCreated;

export interface ThreeCardsInstance extends Truffle.ContractInstance {
  initGame: {
    (
      _token: string,
      _minBet: number | BN | string,
      _maxBet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _minBet: number | BN | string,
      _maxBet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _minBet: number | BN | string,
      _maxBet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _minBet: number | BN | string,
      _maxBet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyIn: {
    (
      _gameId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _gameId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _gameId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _gameId: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getGameData(
    _gameId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    dealer: string;
    token: string;
    pot: BN;
    minBet: BN;
    maxBet: BN;
    winners: string[];
  }>;

  getBet(
    _gameId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ cards: BN[]; betAmount: BN }>;

  showOff: {
    (
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    initGame: {
      (
        _token: string,
        _minBet: number | BN | string,
        _maxBet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _minBet: number | BN | string,
        _maxBet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _minBet: number | BN | string,
        _maxBet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _minBet: number | BN | string,
        _maxBet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyIn: {
      (
        _gameId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _gameId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _gameId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _gameId: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getGameData(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      dealer: string;
      token: string;
      pot: BN;
      minBet: BN;
      maxBet: BN;
      winners: string[];
    }>;

    getBet(
      _gameId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ cards: BN[]; betAmount: BN }>;

    showOff: {
      (
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _gameId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
